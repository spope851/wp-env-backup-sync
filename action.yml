name: WordPress Environment Backup Sync
description: Synchronize WordPress environments with backup and database migration support
branding:
  icon: 'refresh-cw'  
  color: 'white'      

inputs:
  source_env:
    description: 'Source environment name (e.g., release, staging, development)'
    required: true
    type: string
  target_env:
    description: 'Target environment name (e.g., staging, production)'
    required: true
    type: string
  base_path:
    description: 'Base path for WordPress installations'
    required: true
    type: string
  domain:
    description: 'Base domain for the WordPress sites'
    required: true
    type: string
  ssh_host:
    description: 'SSH host'
    required: true
    type: string
  ssh_username:
    description: 'SSH username'
    required: true
    type: string
  ssh_private_key:
    description: 'SSH private key'
    required: true
    type: string
  ssh_known_hosts:
    description: 'SSH known hosts'
    required: true
    type: string
  ssh_key_type:
    description: 'SSH key type (e.g., id_rsa)'
    required: true
    type: string
  ssh_port:
    description: 'SSH port'
    required: true
    type: string
    default: '22'
  encryption_password:
    description: 'Password for encrypting backup files'
    required: true
    type: string
  github_token:
    description: 'GitHub token for pushing changes'
    required: true
    type: string
  skip_tables:
    description: 'Comma-separated list of tables to skip during search-replace. Use empty string to skip no tables.'
    required: false
    type: string
    default: 'wp_comments,wp_commentmeta'
  clear_cache_commands:
    description: 'Comma-separated list of cache clear commands to run (flush,transients,rewrite,litespeed). Use empty string to skip cache clearing.'
    required: false
    type: string
    default: 'flush,transients,rewrite'
  sync_content_dirs:
    description: 'Comma-separated list of wp-content directories to sync (themes,plugins,uploads,languages,mu-plugins). Use empty string to skip content sync.'
    required: false
    type: string
    default: 'themes,plugins,uploads,mu-plugins'
  encryption_algorithm:
    description: 'OpenSSL encryption algorithm to use for backups'
    required: false
    type: string
    default: 'aes-256-cbc'
  encryption_iterations:
    description: 'Number of PBKDF2 iterations for backup encryption'
    required: false
    type: string
    default: '100000'

runs:
  using: "composite"
  steps:
    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ inputs.ssh_private_key }}
        known_hosts: ${{ inputs.ssh_known_hosts }}
        name: ${{ inputs.ssh_key_type }}

    - name: Set environment variables
      shell: bash
      run: |
        if [ "${{ inputs.target_env }}" = "production" ]; then
          echo "TARGET_PATH=${{ inputs.base_path }}" >> $GITHUB_ENV
          echo "TARGET_DOMAIN=${{ inputs.domain }}" >> $GITHUB_ENV
        else
          echo "TARGET_PATH=${{ inputs.base_path }}/${{ inputs.target_env }}" >> $GITHUB_ENV
          echo "TARGET_DOMAIN=${{ inputs.target_env }}.${{ inputs.domain }}" >> $GITHUB_ENV
        fi
        echo "SOURCE_PATH=${{ inputs.base_path }}/${{ inputs.source_env }}" >> $GITHUB_ENV
        echo "SOURCE_DOMAIN=${{ inputs.source_env }}.${{ inputs.domain }}" >> $GITHUB_ENV

    - name: Enable Maintenance Mode
      uses: appleboy/ssh-action@v0.1.8
      with:
        host: ${{ inputs.ssh_host }}
        username: ${{ inputs.ssh_username }}
        key: ${{ inputs.ssh_private_key }}
        port: ${{ inputs.ssh_port }}
        script: |
          wp maintenance-mode activate --path=${{ env.TARGET_PATH }}

    # WP-Content
    - name: Sync Content
      if: inputs.sync_content_dirs != ''
      uses: appleboy/ssh-action@v0.1.8
      with:
        host: ${{ inputs.ssh_host }}
        username: ${{ inputs.ssh_username }}
        key: ${{ inputs.ssh_private_key }}
        port: ${{ inputs.ssh_port }}
        script: |
          for dir in $(echo "${{ inputs.sync_content_dirs }}" | tr ',' ' '); do
            rsync -avz --delete ${{ env.SOURCE_PATH }}/wp-content/$dir/ ${{ env.TARGET_PATH }}/wp-content/$dir/
          done

    # Database Content
    - name: Export Target Backup
      uses: appleboy/ssh-action@v0.1.8
      with:
        host: ${{ inputs.ssh_host }}
        username: ${{ inputs.ssh_username }}
        key: ${{ inputs.ssh_private_key }}
        port: ${{ inputs.ssh_port }}
        script: |
          wp db export ${{ env.TARGET_PATH }}/backup.sql \
          --all-tables \
          --path=${{ env.TARGET_PATH }}

    - name: Content Segmentation
      uses: appleboy/ssh-action@v0.1.8
      with:
        host: ${{ inputs.ssh_host }}
        username: ${{ inputs.ssh_username }}
        key: ${{ inputs.ssh_private_key }}
        port: ${{ inputs.ssh_port }}
        script: |
          wp search-replace "${{ env.SOURCE_DOMAIN }}" "${{ env.TARGET_DOMAIN }}" \
          --all-tables \
          --export=${{ env.TARGET_PATH }}/migration.sql \
          --path=${{ env.SOURCE_PATH }} \
          --skip-columns=guid \
          --skip-tables=${{ inputs.skip_tables }}
          
    - name: Import Source Migration to Target
      uses: appleboy/ssh-action@v0.1.8
      with:
        host: ${{ inputs.ssh_host }}
        username: ${{ inputs.ssh_username }}
        key: ${{ inputs.ssh_private_key }}
        port: ${{ inputs.ssh_port }}
        script: |
          wp db import ${{ env.TARGET_PATH }}/migration.sql --path=${{ env.TARGET_PATH }}

    - name: Disable Maintenance Mode
      if: always()  # Ensures this runs even after rollback
      uses: appleboy/ssh-action@v0.1.8
      with:
        host: ${{ inputs.ssh_host }}
        username: ${{ inputs.ssh_username }}
        key: ${{ inputs.ssh_private_key }}
        port: ${{ inputs.ssh_port }}
        script: |
          wp maintenance-mode deactivate --path=${{ env.TARGET_PATH }}

    # Clear cache in target environment
    - name: Clear Cache in Target
      if: inputs.clear_cache_commands != ''
      uses: appleboy/ssh-action@v0.1.8
      with:
        host: ${{ inputs.ssh_host }}
        username: ${{ inputs.ssh_username }}
        key: ${{ inputs.ssh_private_key }}
        port: ${{ inputs.ssh_port }}
        script: |
          for cmd in $(echo "${{ inputs.clear_cache_commands }}" | tr ',' ' '); do
            case $cmd in
              "flush")
                wp cache flush --path=${{ env.TARGET_PATH }}
                ;;
              "transients")
                wp transient delete --all --path=${{ env.TARGET_PATH }}
                ;;
              "rewrite")
                wp rewrite flush --hard --path=${{ env.TARGET_PATH }}
                ;;
              "litespeed")
                # Check if LiteSpeed Cache plugin is active before attempting to purge
                if wp plugin is-active litespeed-cache --path=${{ env.TARGET_PATH }}; then
                  wp litespeed-purge all --path=${{ env.TARGET_PATH }}
                fi
                ;;
            esac
          done

    # Artifact handling steps
    ## Backup
    - name: Compress Target Backup
      uses: appleboy/ssh-action@v0.1.8
      with:
        host: ${{ inputs.ssh_host }}
        username: ${{ inputs.ssh_username }}
        key: ${{ inputs.ssh_private_key }}
        port: ${{ inputs.ssh_port }}
        script: |
          cd ${{ env.TARGET_PATH }}
          gzip -f backup.sql

    - name: Encrypt Target Backup
      uses: appleboy/ssh-action@v0.1.8
      with:
        host: ${{ inputs.ssh_host }}
        username: ${{ inputs.ssh_username }}
        key: ${{ inputs.ssh_private_key }}
        port: ${{ inputs.ssh_port }}
        script: |
          cd ${{ env.TARGET_PATH }}
          PASS='${{ inputs.encryption_password }}'
          openssl enc -${{ inputs.encryption_algorithm }} -iter ${{ inputs.encryption_iterations }} -pbkdf2 -salt \
            -in backup.sql.gz \
            -out backup.sql.gz.enc \
            -pass "pass:${PASS}"
        
    - name: Transfer Target Backup to GitHub Runner
      shell: bash
      run: |
        eval `ssh-agent -s`
        ssh-add ~/.ssh/${{ inputs.ssh_key_type }}
        ssh-keyscan -p ${{ inputs.ssh_port }} -H ${{ inputs.ssh_host }} >> ~/.ssh/known_hosts
        scp -P ${{ inputs.ssh_port }} ${{ inputs.ssh_username }}@${{ inputs.ssh_host }}:${{ env.TARGET_PATH }}/backup.sql.gz.enc ./backup/${{ inputs.target_env }}/$(date +%Y-%m-%d-%H-%M-%S).sql.gz.enc

    ## Migration
    - name: Compress Source Migration
      uses: appleboy/ssh-action@v0.1.8
      with:
        host: ${{ inputs.ssh_host }}
        username: ${{ inputs.ssh_username }}
        key: ${{ inputs.ssh_private_key }}
        port: ${{ inputs.ssh_port }}
        script: |
          cd ${{ env.TARGET_PATH }}
          gzip -f migration.sql

    - name: Encrypt Source Migration
      uses: appleboy/ssh-action@v0.1.8
      with:
        host: ${{ inputs.ssh_host }}
        username: ${{ inputs.ssh_username }}
        key: ${{ inputs.ssh_private_key }}
        port: ${{ inputs.ssh_port }}
        script: |
          cd ${{ env.TARGET_PATH }}
          PASS='${{ inputs.encryption_password }}'
          openssl enc -aes-256-cbc -iter 100000 -pbkdf2 -salt \
            -in migration.sql.gz \
            -out migration.sql.gz.enc \
            -pass "pass:${PASS}"

    - name: Transfer Source Migration to GitHub Runner
      shell: bash
      run: |
        eval `ssh-agent -s`
        ssh-add ~/.ssh/${{ inputs.ssh_key_type }}
        ssh-keyscan -p ${{ inputs.ssh_port }} -H ${{ inputs.ssh_host }} >> ~/.ssh/known_hosts
        scp -P ${{ inputs.ssh_port }} ${{ inputs.ssh_username }}@${{ inputs.ssh_host }}:${{ env.TARGET_PATH }}/migration.sql.gz.enc ./migration/${{ inputs.target_env }}/$(date +%Y-%m-%d-%H-%M-%S).sql.gz.enc

    - name: Configure Git and Push Changes
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      shell: bash
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git add .
        git commit -m "backup ${{ inputs.target_env }} and sync with ${{ inputs.source_env }}"
        git push origin HEAD:${{ github.ref }}
